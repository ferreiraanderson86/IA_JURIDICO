import streamlit as st
import tempfile
import os
from docx import Document
from analisador import ler_arquivo, gerar_analise, gerar_resposta_chat

st.set_page_config(page_title="Plataforma Jur√≠dica IA", layout="wide")
st.title("‚öñÔ∏è Plataforma Jur√≠dica com IA")

# ------------------------------
# Session State
# ------------------------------
if "analises" not in st.session_state:
    st.session_state.analises = {}

if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

if "area" not in st.session_state:
    st.session_state.area = "Civil"

# ------------------------------
# √Årea Jur√≠dica
# ------------------------------
area = st.selectbox("Escolha a √°rea jur√≠dica:", ["Civil", "Criminal", "Banc√°rio", "Tribut√°rio"])
st.session_state.area = area

def get_prompt_sistema(area: str) -> str:
    base = (
        "Voc√™ √© um advogado brasileiro experiente, redator t√©cnico jur√≠dico, "
        "especializado em {area}. Voc√™ deve responder de forma clara, fundamentada, precisa e formal, "
        "utilizando linguagem adequada ao meio jur√≠dico e considerando as normas vigentes no Brasil. "
        "Sempre que poss√≠vel, fundamente suas respostas com base em legisla√ß√£o, jurisprud√™ncia atualizada, "
        "doutrina majorit√°ria e boas pr√°ticas processuais."
    )

    if area == "Civil":
        return base.format(area="Direito Civil") + (
            " Foque no C√≥digo Civil, C√≥digo de Processo Civil, enunciados das Jornadas de Direito Civil do CJF, "
            "e jurisprud√™ncia do STJ e STF. Considere contratos, obriga√ß√µes, responsabilidade civil, fam√≠lia e sucess√µes."
        )

    elif area == "Criminal":
        return base.format(area="Direito Penal") + (
            " Utilize o C√≥digo Penal, C√≥digo de Processo Penal, jurisprud√™ncia do STJ e STF, "
            "incluindo s√∫mulas e precedentes relevantes. Fundamente defesas, recursos, habeas corpus e medidas cautelares."
        )

    elif area == "Banc√°rio":
        return base.format(area="Direito Banc√°rio e do Consumidor") + (
            " Baseie-se no C√≥digo de Defesa do Consumidor (CDC), resolu√ß√µes do Banco Central (BACEN), "
            "jurisprud√™ncia do STJ, contratos banc√°rios e pr√°ticas abusivas. Considere revis√£o de cl√°usulas, juros abusivos "
            "e a√ß√µes revisionais de contrato."
        )

    elif area == "Tribut√°rio":
        return base.format(area="Direito Tribut√°rio") + (
            " Fundamente suas respostas no C√≥digo Tribut√°rio Nacional (CTN), Constitui√ß√£o Federal, "
            "legisla√ß√£o infraconstitucional, decis√µes do CARF, e jurisprud√™ncia do STJ e STF. "
            "Considere tamb√©m princ√≠pios como legalidade, anterioridade e capacidade contributiva."
        )

    return base.format(area="Direito") + " Atue como um advogado generalista bem preparado e objetivo."


# Inicializa hist√≥rico com prompt da √°rea
if not st.session_state.chat_history:
    st.session_state.chat_history.append({"role": "system", "content": get_prompt_sistema(area)})

# Se j√° houver an√°lises feitas, adicione como contexto
if st.session_state.analises:
    for nome, analise in st.session_state.analises.items():
        st.session_state.chat_history.append({
            "role": "assistant",
            "content": (
                f"An√°lise anterior do documento **{nome}**:\n\n"
                f"{analise[:3000]}"
            )
        })

# ------------------------------
# Upload de Arquivos
# ------------------------------
uploaded_files = st.file_uploader(
    "üìé Envie um ou mais arquivos (PDF, DOCX, imagens, Excel)", 
    type=["pdf", "docx", "png", "jpg", "jpeg", "xls", "xlsx"], 
    accept_multiple_files=True
)

col1, col2 = st.columns([1, 1])

# ------------------------------
# Analisar contratos (Civil e Banc√°rio)
# ------------------------------
if area in ["Civil", "Banc√°rio"] and uploaded_files:
    with col1:
        if st.button("üîç Analisar Contratos"):
            for up in uploaded_files:
                try:
                    with st.spinner(f"Analisando {up.name}..."):
                        texto = ler_arquivo(up)
                        analise = gerar_analise(texto, area=area)
                        st.session_state.analises[up.name] = analise
                        st.session_state.chat_history.append(
                            {"role": "assistant", "content": f"An√°lise do contrato {up.name}:\n{analise}"}
                        )
                except Exception as e:
                    st.error(f"Erro ao analisar {up.name}: {e}")

# ------------------------------
# Limpar an√°lises
# ------------------------------
with col2:
    if st.session_state.analises and st.button("üóë Limpar an√°lises"):
        st.session_state.analises = {}

# ------------------------------
# Exibi√ß√£o das an√°lises
# ------------------------------
if st.session_state.analises:
    st.subheader("üìë An√°lises geradas")

    for nome, analise in st.session_state.analises.items():
        with st.expander(f"{nome}"):
            st.text_area("Parecer Jur√≠dico", analise, height=350)

            st.download_button(
                "‚¨á Baixar parecer",
                analise.encode("utf-8"),
                file_name=f"parecer_{nome}.txt",
                mime="text/plain"
            )

            if st.button(f"‚úç Gerar Peti√ß√£o Inicial para {nome}"):
                with st.spinner("Gerando peti√ß√£o inicial..."):
                    try:
                        doc = Document()
                        doc.add_heading("Peti√ß√£o Inicial", 0)
                        doc.add_paragraph(analise)
                        peticao_path = os.path.join(tempfile.gettempdir(), f"peticao_inicial_{nome}.docx")
                        doc.save(peticao_path)

                        with open(peticao_path, "rb") as f:
                            st.download_button(
                                f"‚¨á Baixar Peti√ß√£o ({nome})",
                                f,
                                file_name=f"peticao_inicial_{nome}.docx",
                                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                            )
                    except Exception as e:
                        st.error(f"Erro ao gerar peti√ß√£o: {e}")
else:
    st.info("Nenhuma an√°lise dispon√≠vel ainda.")

# ------------------------------
# Chat Jur√≠dico
# ------------------------------
st.divider()
st.subheader(f"üí¨ Chat Jur√≠dico ‚Äì √Årea: {area}")

# Exibe hist√≥rico
for msg in st.session_state.chat_history:
    if msg["role"] == "user":
        with st.chat_message("user"):
            st.markdown(msg["content"])
    elif msg["role"] == "assistant":
        with st.chat_message("assistant"):
            st.markdown(msg["content"])

# Entrada do chat
if prompt := st.chat_input("Digite sua pergunta para a IA jur√≠dica"):
    st.session_state.chat_history.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        with st.spinner("Analisando..."):
            try:
                resposta = gerar_resposta_chat(st.session_state.chat_history)
                st.markdown(resposta)
                st.session_state.chat_history.append({"role": "assistant", "content": resposta})
            except Exception as e:
                st.error(f"Erro ao responder: {e}")

# ------------------------------
# Sidebar
# ------------------------------
with st.sidebar:
    st.header("‚öôÔ∏è Configura√ß√µes")
    if st.button("üßπ Limpar hist√≥rico do chat"):
        st.session_state.chat_history = [{"role": "system", "content": get_prompt_sistema(area)}]
    st.markdown("---")
    st.caption("Desenvolvido com ‚ù§Ô∏è por voc√™ e IA")
