import os
import argparse
import pdfplumber
import docx
from dotenv import load_dotenv
from openai import OpenAI

# ---------------------------
# Configura√ß√µes
# ---------------------------

SYSTEM_PROMPT_ANALISE = (
    "Voc√™ √© um advogado brasileiro especialista em direito do consumidor e banc√°rio. "
    "Analise o contrato enviado, identifique cl√°usulas potencialmente abusivas, riscos, "
    "fundamenta√ß√£o jur√≠dica (CDC, STJ, S√∫mulas, artigos do CC, etc.), calcule/indique poss√≠veis "
    "vantagens econ√¥micas e sugira estrat√©gias (administrativas e judiciais). "
    "Seja claro, objetivo, estruturado e aponte artigos/s√∫mulas quando pertinente."
)

USER_PROMPT_TEMPLATE = """
Analise o seguinte contrato banc√°rio (ou de presta√ß√£o de servi√ßos) e elabore um parecer jur√≠dico completo contendo:

1) **Resumo do contrato** (partes, objeto, dura√ß√£o, valores, multas, foro, etc.)
2) **Pontos cr√≠ticos / cl√°usulas potencialmente abusivas** (explique o porqu√™ e cite fundamento legal/jurisprudencial)
3) **Riscos ao contratante**
4) **Fundamenta√ß√£o jur√≠dica aplic√°vel** (CDC, CC, STJ, s√∫mulas, resolu√ß√µes do BACEN, etc.)
5) **Estrat√©gias e pedidos poss√≠veis** (administrativas e judiciais)
6) **Documentos e provas que devem ser reunidos**
7) **Estimativa de vantagem econ√¥mica (se aplic√°vel)**
8) **Modelo de pedidos (t√≥picos)**

Contrato (trecho ou inteiro):
\"\"\"{texto}\"\"\"
"""

SYSTEM_PROMPT_PETICAO = (
    "Voc√™ √© um advogado brasileiro especialista em peti√ß√µes iniciais. "
    "Com base na an√°lise jur√≠dica fornecida, redija uma peti√ß√£o inicial completa, "
    "bem estruturada, com linguagem t√©cnica adequada, incluindo endere√ßamento, qualifica√ß√£o das partes, "
    "fatos, fundamentos jur√≠dicos (com artigos, s√∫mulas, precedentes), pedidos (com tutela de urg√™ncia se couber), "
    "valor da causa, provas, e requerimentos finais."
)

USER_PROMPT_PETICAO = """
Use a an√°lise jur√≠dica abaixo para redigir a **peti√ß√£o inicial completa**.
Inclua: endere√ßamento, qualifica√ß√£o das partes (coloque campos para serem preenchidos), fatos, fundamentos jur√≠dicos
(detalhados com artigos, s√∫mulas e precedentes), pedidos, valor da causa (campo para preenchimento), provas, e requerimentos finais.
Se pertinente, inclua pedidos de tutela de urg√™ncia.

An√°lise jur√≠dica:
\"\"\"{analise}\"\"\"
"""

# ---------------------------
# Leitura de arquivos
# ---------------------------

def ler_pdf(caminho: str) -> str:
    with pdfplumber.open(caminho) as pdf:
        textos = []
        for page in pdf.pages:
            txt = page.extract_text() or ""
            textos.append(txt)
    return "\n".join(textos)

def ler_docx(caminho: str) -> str:
    d = docx.Document(caminho)
    return "\n".join(p.text for p in d.paragraphs)

def ler_arquivo(caminho: str) -> str:
    ext = os.path.splitext(caminho.lower())[1]
    if ext == ".pdf":
        return ler_pdf(caminho)
    elif ext == ".docx":
        return ler_docx(caminho)
    else:
        raise ValueError("Formato n√£o suportado. Use PDF ou DOCX.")

# ---------------------------
# OpenAI helpers
# ---------------------------

def get_client():
    load_dotenv()
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        raise RuntimeError("OPENAI_API_KEY n√£o encontrada. Defina no .env.")
    return OpenAI(api_key=api_key)

def call_chat_completion(client: OpenAI, system_prompt: str, user_prompt: str, model: str = "gpt-4o"):
    return client.chat.completions.create(
        model=model,
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt},
        ],
        temperature=0.2,
    ).choices[0].message.content

# ---------------------------
# L√≥gica principal
# ---------------------------

def analisar_contrato(caminho_arquivo: str, model: str = "gpt-4o") -> str:
    texto = ler_arquivo(caminho_arquivo)

    # Se o contrato for muito grande, voc√™ pode optar por truncar ou fatiar.
    # Aqui, deixei simples. Ajuste se necess√°rio.
    prompt_user = USER_PROMPT_TEMPLATE.format(texto=texto[:120000])  # ~120k chars de seguran√ßa

    client = get_client()
    analise = call_chat_completion(client, SYSTEM_PROMPT_ANALISE, prompt_user, model=model)
    return analise

def gerar_peticao(analise: str, model: str = "gpt-4o") -> str:
    client = get_client()
    user_prompt = USER_PROMPT_PETICAO.format(analise=analise)
    peticao = call_chat_completion(client, SYSTEM_PROMPT_PETICAO, user_prompt, model=model)
    return peticao

def salvar(texto: str, caminho: str):
    with open(caminho, "w", encoding="utf-8") as f:
        f.write(texto)

def main():
    parser = argparse.ArgumentParser(description="Analisar contrato banc√°rio com GPT-4o e (opcional) gerar peti√ß√£o.")
    parser.add_argument("--arquivo", "-a", required=True, help="Caminho do contrato (PDF ou DOCX)")
    parser.add_argument("--saida", "-s", default="parecer.md", help="Arquivo de sa√≠da do parecer (.md)")
    parser.add_argument("--modelo", "-m", default="gpt-4o", help="Modelo (ex: gpt-4o, gpt-4.1, gpt-4o-mini)")
    parser.add_argument("--peticao", action="store_true", help="Gerar tamb√©m a peti√ß√£o inicial com base na an√°lise")
    parser.add_argument("--saida-peticao", default="peticao.md", help="Arquivo de sa√≠da da peti√ß√£o (.md)")
    args = parser.parse_args()

    print("üëâ Lendo contrato...")
    try:
        analise = analisar_contrato(args.arquivo, model=args.modelo)
    except Exception as e:
        print("Erro ao analisar contrato:", e)
        return

    salvar(analise, args.saida)
    print(f"‚úÖ Parecer salvo em: {args.saida}")

    if args.peticao:
        print("üëâ Gerando peti√ß√£o inicial...")
        try:
            peticao = gerar_peticao(analise, model=args.modelo)
            salvar(peticao, args.saida_peticao)
            print(f"‚úÖ Peti√ß√£o salva em: {args.saida_peticao}")
        except Exception as e:
            print("Erro ao gerar peti√ß√£o:", e)

if __name__ == "__main__":
    main()
